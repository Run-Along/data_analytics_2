{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "COVID - Mini Project",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Run-Along/CSci127/blob/master/COVID_Mini_Project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vJtNKCcySaL5"
      },
      "source": [
        "##**# COVID 19 Data Analysis**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7JEFpq5ZSjDB"
      },
      "source": [
        "**Description:** This script will read the latest data from the New York Times' county-level COVID-19 database at https://github.com/nytimes/covid-19-data/blob/master/us-counties.csv and filter the data for two states, New York and Texas. This data will focus on the impact of weather in reported new cases for Washington and New York during their hottest months (July for New York and August for Texas). This data will also look at new cases during their coldest month.\r\n",
        "\r\n",
        "**Important Note**: January is the coldest month for New York and Texas. However, at the time of testing, there is not enough data for January. Analyst instead focused on November.\r\n",
        "\r\n",
        "**Note:** For information about the data, see https://github.com/nytimes/covid-19-data.\r\n",
        "\r\n",
        "**Note:** After you have run the script one time in a given Anaconda environment, you may reduce the script's execution time by adding a `#` in front of `pip install pandas`. For example, `#pip install pandas` instead of `pip install pandas`. The `#` will tell Python to skip the code without running it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y8EVeBmrSvCT"
      },
      "source": [
        "Task 1 : Environment Set up\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4EI4-9PCSW3D"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "from matplotlib import style"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jYSG1BOyUE_y"
      },
      "source": [
        "##**Use nytimes github repository as a data source to collect the covid 19 data in real time and ingest it into colab notebook for data anlysis purpose**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qK1nM-_7UDfj"
      },
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "XcqN9LemUVyk",
        "outputId": "76efce72-ed09-49f3-a9fb-8466756720e2"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-01-21</td>\n",
              "      <td>Washington</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-01-22</td>\n",
              "      <td>Washington</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-01-23</td>\n",
              "      <td>Washington</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-01-24</td>\n",
              "      <td>Illinois</td>\n",
              "      <td>17</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-01-24</td>\n",
              "      <td>Washington</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         date       state  fips  cases  deaths\n",
              "0  2020-01-21  Washington    53      1       0\n",
              "1  2020-01-22  Washington    53      1       0\n",
              "2  2020-01-23  Washington    53      1       0\n",
              "3  2020-01-24    Illinois    17      1       0\n",
              "4  2020-01-24  Washington    53      1       0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "FjujFQ_WV144",
        "outputId": "b5a8577a-1eb5-4738-eff3-8a9320324186"
      },
      "source": [
        "df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17499</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>Virginia</td>\n",
              "      <td>51</td>\n",
              "      <td>417839</td>\n",
              "      <td>5626</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17500</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>Washington</td>\n",
              "      <td>53</td>\n",
              "      <td>288127</td>\n",
              "      <td>3949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17501</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>West Virginia</td>\n",
              "      <td>54</td>\n",
              "      <td>105219</td>\n",
              "      <td>1702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17502</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>Wisconsin</td>\n",
              "      <td>55</td>\n",
              "      <td>561160</td>\n",
              "      <td>5729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17503</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>Wyoming</td>\n",
              "      <td>56</td>\n",
              "      <td>48701</td>\n",
              "      <td>522</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             date          state  fips   cases  deaths\n",
              "17499  2021-01-14       Virginia    51  417839    5626\n",
              "17500  2021-01-14     Washington    53  288127    3949\n",
              "17501  2021-01-14  West Virginia    54  105219    1702\n",
              "17502  2021-01-14      Wisconsin    55  561160    5729\n",
              "17503  2021-01-14        Wyoming    56   48701     522"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u0lget_LU1DF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9eac4aef-fe70-45c9-8555-353d1bacd235"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(17504, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ORrMN_coVffg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7120e2f2-0ca1-4ec3-b266-cb7c3b32a34c"
      },
      "source": [
        "df.columns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['date', 'state', 'fips', 'cases', 'deaths'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3qv-PgCMV30_"
      },
      "source": [
        "#**Task 3: Data Wrangling and EDA (Exploratory Data Analysis)**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AMeGSFz4XyIq"
      },
      "source": [
        "##Analyzing New York & Texas state data for Covid 19"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-cFnIIZKX0BB"
      },
      "source": [
        "#grabbing the Texas and NY data\r\n",
        "ny_df = df[df['state']=='New York']\r\n",
        "tx_df = df[df['state'] == 'Texas']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "ZLmkc41JX5g9",
        "outputId": "7fc2dc57-c424-4a69-d9d9-7e9639853fe0"
      },
      "source": [
        "ny_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2020-03-01</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>2020-03-02</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>2020-03-03</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>2020-03-04</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>2020-03-05</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           date     state  fips  cases  deaths\n",
              "246  2020-03-01  New York    36      1       0\n",
              "261  2020-03-02  New York    36      1       0\n",
              "276  2020-03-03  New York    36      2       0\n",
              "293  2020-03-04  New York    36     11       0\n",
              "313  2020-03-05  New York    36     22       0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "1piPBVa4V7wA",
        "outputId": "416ec91d-3173-49b1-b906-1795bb9b47f5"
      },
      "source": [
        "ny_df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17262</th>\n",
              "      <td>2021-01-10</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1135849</td>\n",
              "      <td>39208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17317</th>\n",
              "      <td>2021-01-11</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1150028</td>\n",
              "      <td>39404</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17372</th>\n",
              "      <td>2021-01-12</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1164819</td>\n",
              "      <td>39588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17427</th>\n",
              "      <td>2021-01-13</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1179523</td>\n",
              "      <td>39760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17482</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1193710</td>\n",
              "      <td>39997</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             date     state  fips    cases  deaths\n",
              "17262  2021-01-10  New York    36  1135849   39208\n",
              "17317  2021-01-11  New York    36  1150028   39404\n",
              "17372  2021-01-12  New York    36  1164819   39588\n",
              "17427  2021-01-13  New York    36  1179523   39760\n",
              "17482  2021-01-14  New York    36  1193710   39997"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "bLMlX-IVWEeB",
        "outputId": "c1cb8d06-f4b6-4fe1-927a-ee2e7699f7ec"
      },
      "source": [
        "tx_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2020-02-12</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>2020-02-13</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>2020-02-14</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119</th>\n",
              "      <td>2020-02-15</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>2020-02-16</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           date  state  fips  cases  deaths\n",
              "98   2020-02-12  Texas    48      1       0\n",
              "105  2020-02-13  Texas    48      2       0\n",
              "112  2020-02-14  Texas    48      2       0\n",
              "119  2020-02-15  Texas    48      2       0\n",
              "126  2020-02-16  Texas    48      2       0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "a4ZSb32FCCbx",
        "outputId": "b35c64d5-36af-4c73-c36e-5124bfad1f4b"
      },
      "source": [
        "tx_df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17275</th>\n",
              "      <td>2021-01-10</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>1967859</td>\n",
              "      <td>30599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17330</th>\n",
              "      <td>2021-01-11</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>1991625</td>\n",
              "      <td>30720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17385</th>\n",
              "      <td>2021-01-12</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2018685</td>\n",
              "      <td>31017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17440</th>\n",
              "      <td>2021-01-13</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2042009</td>\n",
              "      <td>31396</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17495</th>\n",
              "      <td>2021-01-14</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2071932</td>\n",
              "      <td>31819</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             date  state  fips    cases  deaths\n",
              "17275  2021-01-10  Texas    48  1967859   30599\n",
              "17330  2021-01-11  Texas    48  1991625   30720\n",
              "17385  2021-01-12  Texas    48  2018685   31017\n",
              "17440  2021-01-13  Texas    48  2042009   31396\n",
              "17495  2021-01-14  Texas    48  2071932   31819"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RGGYuEQPYCJe",
        "outputId": "1d69bf0b-3546-4ae1-edb6-fd07d5e2b859"
      },
      "source": [
        "ny_df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(320, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BzfCrBT3eLL6",
        "outputId": "5aedb227-8efe-4b73-fd15-26e1364e4e46"
      },
      "source": [
        "tx_df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(338, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nMTv9VEkbX23"
      },
      "source": [
        "##**Task4: New cases calculation for New York and Texas during their hottest and coldest months**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "37fE3OuGY0up"
      },
      "source": [
        "Finding new daily covid 19 cases in New York (new cases added everyday)\r\n",
        "\r\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-iCNMAWbLWB"
      },
      "source": [
        "#calculate new cases in NY\r\n",
        "newcase = []\r\n",
        "previuos_case = 0\r\n",
        "for index, row in ny_df.iterrows():\r\n",
        "  current_case = row['cases']\r\n",
        "  newcase_count = current_case - previuos_case\r\n",
        "  previuos_case = current_case\r\n",
        "  newcase.append(newcase_count)\r\n",
        "  # print(newcase_count)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IedzxLsJbs8_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "5f206f19-606b-4930-9854-434fe65b450e"
      },
      "source": [
        "#add to the New York dataframe\r\n",
        "ny_df['new_cases'] = newcase\r\n",
        "ny_df.head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "      <th>new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2020-03-01</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>2020-03-02</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>2020-03-03</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>2020-03-04</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>2020-03-05</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>2020-03-06</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>369</th>\n",
              "      <td>2020-03-07</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>89</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404</th>\n",
              "      <td>2020-03-08</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>440</th>\n",
              "      <td>2020-03-09</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>142</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>478</th>\n",
              "      <td>2020-03-10</td>\n",
              "      <td>New York</td>\n",
              "      <td>36</td>\n",
              "      <td>173</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           date     state  fips  cases  deaths  new_cases\n",
              "246  2020-03-01  New York    36      1       0          1\n",
              "261  2020-03-02  New York    36      1       0          0\n",
              "276  2020-03-03  New York    36      2       0          1\n",
              "293  2020-03-04  New York    36     11       0          9\n",
              "313  2020-03-05  New York    36     22       0         11\n",
              "338  2020-03-06  New York    36     44       0         22\n",
              "369  2020-03-07  New York    36     89       0         45\n",
              "404  2020-03-08  New York    36    106       0         17\n",
              "440  2020-03-09  New York    36    142       0         36\n",
              "478  2020-03-10  New York    36    173       0         31"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GTjBtWRBCl9H"
      },
      "source": [
        "Finding new daily covid 19 cases in Texas (new cases added everyday) "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8EKoRBoMCrsC"
      },
      "source": [
        "#calculate new cases in TX\r\n",
        "newcase = []\r\n",
        "previuos_case = 0\r\n",
        "for index, row in tx_df.iterrows():\r\n",
        "  current_case = row['cases']\r\n",
        "  newcase_count = current_case - previuos_case\r\n",
        "  previuos_case = current_case\r\n",
        "  newcase.append(newcase_count)\r\n",
        "  # print(newcase_count)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ngU1LrIfCxvJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "3e349d86-54e9-4b0b-b1e6-2d601a47bb20"
      },
      "source": [
        "#add to the Texas dataframe\r\n",
        "tx_df['new_cases'] = newcase\r\n",
        "tx_df.head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>state</th>\n",
              "      <th>fips</th>\n",
              "      <th>cases</th>\n",
              "      <th>deaths</th>\n",
              "      <th>new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2020-02-12</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>2020-02-13</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>2020-02-14</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119</th>\n",
              "      <td>2020-02-15</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>2020-02-16</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134</th>\n",
              "      <td>2020-02-17</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>2020-02-18</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>2020-02-19</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>158</th>\n",
              "      <td>2020-02-20</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>2020-02-21</td>\n",
              "      <td>Texas</td>\n",
              "      <td>48</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           date  state  fips  cases  deaths  new_cases\n",
              "98   2020-02-12  Texas    48      1       0          1\n",
              "105  2020-02-13  Texas    48      2       0          1\n",
              "112  2020-02-14  Texas    48      2       0          0\n",
              "119  2020-02-15  Texas    48      2       0          0\n",
              "126  2020-02-16  Texas    48      2       0          0\n",
              "134  2020-02-17  Texas    48      2       0          0\n",
              "142  2020-02-18  Texas    48      2       0          0\n",
              "150  2020-02-19  Texas    48      2       0          0\n",
              "158  2020-02-20  Texas    48      2       0          0\n",
              "166  2020-02-21  Texas    48      4       0          2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cB2Lx9VweqGw"
      },
      "source": [
        "##**Task5:  Visualization of New Cases in New York and Texas during their hottest and coldest month**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "frcxuy1I_mcC"
      },
      "source": [
        "Visual Representation of New Cases in New York during it's hottest month, July"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GuKPB-9nyzDO"
      },
      "source": [
        "ny_july_dates_31 = ny_df['date'][122:153]\r\n",
        "ny_july_new_cases_31 = ny_df['new_cases'][122:153]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "jzjavI9Sy_mF",
        "outputId": "3837a3dc-5e65-429d-d65d-23a2dcd09a2d"
      },
      "source": [
        "plt.figure(figsize=(15,7))\r\n",
        "plt.bar(x=ny_july_dates_31, height=ny_july_new_cases_31, color='coral')\r\n",
        "plt.xticks(rotation=70)\r\n",
        "plt.title('Reported new NY cases in July')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R_gTloeD_5aU"
      },
      "source": [
        "Visual Representation of New Cases in New York in November"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9ibD5rrBJea"
      },
      "source": [
        "ny_november_dates_30 = ny_df['date'][245:275]\r\n",
        "ny_november_new_cases_30 = ny_df['new_cases'][245:275]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "FNPUYLHCBNho",
        "outputId": "8e5e5a10-aa9b-45b6-e261-f20becad5125"
      },
      "source": [
        "plt.figure(figsize=(15,7))\r\n",
        "plt.bar(x=ny_november_dates_30, height=ny_november_new_cases_30, color='powderblue')\r\n",
        "plt.xticks(rotation=70)\r\n",
        "plt.title('Reported new NY cases in November')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gzw-cmLjDMkE"
      },
      "source": [
        "Visual Representation of New Cases in Texas during its hottest month, August"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VR6qKjgMhwmM"
      },
      "source": [
        "tx_august_dates_31 = tx_df['date'][171:202]\r\n",
        "tx_august_new_cases_31 = tx_df['new_cases'][171:202]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "5pa2AEOIhwxN",
        "outputId": "7a99a0d6-4e7b-4893-aecc-aea61ef2f29a"
      },
      "source": [
        "plt.figure(figsize=(15,7))\r\n",
        "plt.bar(x=tx_august_dates_31, height=tx_august_new_cases_31, color='coral')\r\n",
        "plt.xticks(rotation=70)\r\n",
        "plt.title('Reported new TX cases in August')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cH5xSr5ZFMHO"
      },
      "source": [
        "Visual Representation of New Cases in Texas in November"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y8BxKBvHnNF1"
      },
      "source": [
        "tx_november_dates_30 = tx_df['date'][263:293]\r\n",
        "tx_november_new_cases_30 = tx_df['new_cases'][263:293]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "aoOrzl8BnV8Q",
        "outputId": "82749828-c8f2-46df-c7b2-b635524def68"
      },
      "source": [
        "plt.figure(figsize=(15,7))\r\n",
        "plt.bar(x=tx_november_dates_30, height=tx_november_new_cases_30, color='powderblue')\r\n",
        "plt.xticks(rotation=70)\r\n",
        "plt.title('Reported new TX cases in November')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VTUQv2zQWQfT"
      },
      "source": [
        "##**6. Visualization of hottest and coldest months for New York and Texas**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tofo3gGwXPGo"
      },
      "source": [
        "Visual representation of new cases in New York in July and November "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZM_QcaIoHjJT"
      },
      "source": [
        "#grab the NY July new cases for a new dataframe.\r\n",
        "#only grab 30 days instead of 31 to match data with november\r\n",
        "july_df = ny_df[['new_cases']][122:152].reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s8yG75dRRBc9"
      },
      "source": [
        "#rename the column\r\n",
        "july_df = july_df.rename(columns={\"new_cases\": \"july_new_cases\"})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BX4TXF1_IPEG"
      },
      "source": [
        "#grab the NY November new cases for a new dataframe.\r\n",
        "november_df = ny_df[['new_cases']][245:275]\r\n",
        "november_df = november_df.reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dP5YWi_ESvlb"
      },
      "source": [
        "#rename the column\r\n",
        "november_df = november_df.rename(columns={\"new_cases\": \"november_new_cases\"})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TlWfoMRiJwxJ"
      },
      "source": [
        "#join our dataframes together\r\n",
        "#start the index at 1\r\n",
        "new_york_hot_and_cold_df = pd.concat([november_df, july_df], axis=1)\r\n",
        "new_york_hot_and_cold_df.index +=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "fSjYUPfcOzDl",
        "outputId": "8b9fb66e-0606-42bb-94a2-f74ce1b9599f"
      },
      "source": [
        "new_york_hot_and_cold_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>november_new_cases</th>\n",
              "      <th>july_new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2259</td>\n",
              "      <td>628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1632</td>\n",
              "      <td>872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2317</td>\n",
              "      <td>919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2126</td>\n",
              "      <td>725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3002</td>\n",
              "      <td>536</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   november_new_cases  july_new_cases\n",
              "1                2259             628\n",
              "2                1632             872\n",
              "3                2317             919\n",
              "4                2126             725\n",
              "5                3002             536"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "yIoM8mlPJrUW",
        "outputId": "dc0a062c-797b-42eb-df59-96015c18fb35"
      },
      "source": [
        "new_york_hot_and_cold_df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>november_new_cases</th>\n",
              "      <th>july_new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>6938</td>\n",
              "      <td>532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>8179</td>\n",
              "      <td>613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>6060</td>\n",
              "      <td>535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>6732</td>\n",
              "      <td>711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>6816</td>\n",
              "      <td>779</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    november_new_cases  july_new_cases\n",
              "26                6938             532\n",
              "27                8179             613\n",
              "28                6060             535\n",
              "29                6732             711\n",
              "30                6816             779"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "9_9gj20dO26V",
        "outputId": "a249e5ab-d5e7-4314-9a65-9a88436ae3cb"
      },
      "source": [
        "ny_visual_graph = new_york_hot_and_cold_df.plot(figsize=(15,7), title = \"NY New Daily Cases in November and July\", xlabel = 'Days', ylabel = 'Reported New Daily Cases')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fg_nvBf_XqBb"
      },
      "source": [
        "Visual representation of new cases in Texas in July and November "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HSEpVyerXuIp"
      },
      "source": [
        "#grab the TX August new cases for a new dataframe.\r\n",
        "#only grab 30 days instead of 31 to match data with november\r\n",
        "august_df = tx_df[['new_cases']][171:201].reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MjiRJPaiX_Ds"
      },
      "source": [
        "august_df = august_df.rename(columns={\"new_cases\": \"august_new_cases\"})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-mZox28QYHNS"
      },
      "source": [
        "#grab the TX November new cases for a new dataframe.\r\n",
        "tx_november_df = tx_df[['new_cases']][263:293]\r\n",
        "tx_november_df = tx_november_df.reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IkxpnhU5YWNt"
      },
      "source": [
        "#rename the column\r\n",
        "tx_november_df = tx_november_df.rename(columns={\"new_cases\": \"november_new_cases\"})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T_IknbYmYefl"
      },
      "source": [
        "#join our dataframes together\r\n",
        "#start the index at 1\r\n",
        "texas_hot_and_cold_df = pd.concat([tx_november_df, august_df], axis=1)\r\n",
        "texas_hot_and_cold_df.index +=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "J0d8wt7eY7r7",
        "outputId": "d0a10071-11fa-4b7c-9403-2d602329996c"
      },
      "source": [
        "texas_hot_and_cold_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>november_new_cases</th>\n",
              "      <th>august_new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4338</td>\n",
              "      <td>5134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7991</td>\n",
              "      <td>6535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8512</td>\n",
              "      <td>8782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10627</td>\n",
              "      <td>9564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8975</td>\n",
              "      <td>9362</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   november_new_cases  august_new_cases\n",
              "1                4338              5134\n",
              "2                7991              6535\n",
              "3                8512              8782\n",
              "4               10627              9564\n",
              "5                8975              9362"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wJyQkOCNKxv3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "ef37a494-75ed-4e7c-da68-90ef6c4b0562"
      },
      "source": [
        "texas_hot_and_cold_df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>november_new_cases</th>\n",
              "      <th>august_new_cases</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>4504</td>\n",
              "      <td>6129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>4753</td>\n",
              "      <td>3811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>6026</td>\n",
              "      <td>4845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>12390</td>\n",
              "      <td>5342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>15080</td>\n",
              "      <td>2713</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    november_new_cases  august_new_cases\n",
              "26                4504              6129\n",
              "27                4753              3811\n",
              "28                6026              4845\n",
              "29               12390              5342\n",
              "30               15080              2713"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "eO7VWdTFZBex",
        "outputId": "1bd19771-38c1-4a05-80c1-110e9fcb32e5"
      },
      "source": [
        "tx_visual_graph = texas_hot_and_cold_df.plot(figsize=(15,7), title = \"TX New Daily Cases in November and July\", xlabel = 'Days', ylabel = 'Reported New Daily Cases')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4gAAAG5CAYAAADMCRrvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3yV9fn/8deVQQYzC2QEkgCiIAoyAiqK2iruXUdVHLW1ztZ+ratDW/3Vr9pvLRW1tiJuUazVWqsoDlBBDAoCgg2QAEFWEghkkvH5/XHfJx4xhABJzsj7+XicR04+97ruk4Oe61yfYc45RERERERERGJCHYCIiIiIiIiEByWIIiIiIiIiAihBFBEREREREZ8SRBEREREREQGUIIqIiIiIiIhPCaKIiIiIiIgAShBFRCQMmNmjZvZr//lEMysKdUxtwczKzSwn1HG0JTN738x+FOo4WsLM7jSzZ1rpXM7MBrXGuUREQkkJoohIiPjJQuDRYGZVQb//0Mz+aGazdjnmQTN7fTfnu8z/kPrLXdqLzGxiG97HZWZWHxR7gZk9YWYHtvQczrmrnXO/b6V4LjKzPD+WDWb2HzM7qjXOvb+cc12cc6v39jgzy/L/tm/s0v6Mmd3ZagFKo6DXPC7UsYiItCcliCIiIeInC12cc12AtcBpQW3PAr8GcszscgAzGw9MBq5u5rSlwC/NrGtbx7+Lef59dAe+B1QBC83skPYMwsxuAh4E/h/QC+gPPAyc0Z5xtKFcMzsi1EG0B/Poc4qISDvTf3hFRMKUc64SuAp4wMwGANOAW51zzXW/XA7MA25qaqOZxZjZrWa2ysxKzOxFM0v1tz1pZr/wn/f1qyfX+r8PNLPSPX1gd87VO+dWOeeuAT4A7gy69ktmttHMysxsjpkNC9o23czubiLem83s5V3appjZn5vYtzvwO+Ba59w/nHMVzrla59y/nHM3+/uMNbN5ZrbNry4+ZGad/G1mZn8ys81mtt3MlgQSXDNLMLMHzGytmW3yu8Qm+dvSzex1/5ylZjZ3d69TcDdE/56nmtm/zWyHmX1iZgObe32B+4B7drfRzK4ys5V+HK+ZWR+//REze2CXfV/1E2rMrI+ZvWxmW/wK8A1B+93p/+2e8eNcYmYHmtlt/mu1zsxO2CWUgWa2wH8dXw28x/zzjTOzj/3Xa3Fwddu87qn3mNlHQCXwne64Qe/fHWb2pZmdFbTtMjP70P9bbfXv5aSg7dlm9oF/7NtA+h5e7+DrfqvrbOBaTew3xn+PxAa1nW1mi1t6LRGRUFKCKCISxpxz7wEzgYXARuCxFhz2a+BnwR/Kg1wPnAkcA/QBtgJT/W0fABP958cAq4Gjg36f65xr2Ivw/wFMCPr9P8BgoCfwGfBsC87xDDDJzHoAmNfd7wLgqSb2HQ8kAq80c7564Od4icF44HjgGn/bCXj3eyBeJfQHQIm/7V6/fQQwCOgL/Mbf9gugCMjAq1reDrgW3Bv+vdwFpAAraSb58z0MHGhm39t1g5kdB/zBj7s3sAZ4wd/8PHC+mZm/b4p/vy/4yey/gMX+fR2P9/45Mej0pwFP+3F+DryF9xmiL15S/tddwrkUuMKPow6Y4l+3L/Bv4G4gFfgf4GUzywg69hLgx0BX/x52tQrvfdUd77V7xsx6B23PBb7C+xvfBzweuG/gObx/S+nA7/Eq8q3KOfcp3vsmOGm+hKbfsyIiYUcJoohI+JsLpAHPOef2mHg45xYBbwO3NLH5auAO51yRc64Gr8J3rp94fQAc5ScMR+N9uD7SP+4Yf/ve+BovCQjENc05tyPouof5Vb/m7mUDMAc4z2+aBBQ75xY2sXuav62umfMtdM7Nd87VOecK8RKbY/zNtXhJyUGAOeeWO+c2+MnFj4GfO+dKnXM78LqwXhB0XG9ggF+xnNuSv5PvFefcAj/mZ/ES0OZU4SWR36m2Aj8EpjnnPvNf49uA8WaWhfcecnyTsJ+L1y34a2AMkOGc+51zbqc/RvJvQfcH3pcDb/lxvoSXDN/rnKvFS0KzAkm872nn3FLnXAXeFxY/8CtqFwNvOOfecM41OOfeBvKAk4OOne6cW+b/jWp3vUnn3EvOua/942cA+cDYoF3WOOf+5pyrB57E+9v0MrP+/r3+2jlX45ybg5cYt4Un8e4V/4uaE/GSUxGRsKcEUUQkjJlZGvAA3ri63+3yIbw5vwF+ama9dmkfALzid+/bhtcltR7o5ZxbBVTgJSkTgNeBr81sCPuWIPbFGxOJmcWa2b1+18DtQKG/T0u6+DV+2PZ/Pr2b/UqAdGtmUhG/a+Tr5nV13Y6X6KUDOOfeBR7Cq6huNrPHzKwbXjKUjDemMvC6vem3A9yPV/2bZWarzezWFtxTwMag55VAlxYc83e8hOe0Xdr7EFRxc86V470mff2E9QXgQn/zRXxTwR0A9Ancm39/t+NVQwM2BT2vwkvE64N+Z5fY1wU9XwPE473OA4DzdrnWUXhJXFPHfoeZXWpmi4KOP4Rvv48aX1O/m3Ygtj7AVj9pDY6tLTwDnGZmnfEqunP9LztERMKeEkQRkfD2IPCmc+7neJW0B/awPwDOuRV4XTzv2GXTOuAk51yPoEeic269v/0DvOpSJ7/tA7xueCnAor2M/Sy8yhV4CckZeBPYdAey/Hb77mHf8U/gUPPGA57K7rumzgNq8LrQ7s4jwApgsHOuG14i1BiDc26Kc24UMBSvS+nNQDFeEjQs6DXr7k/Kg18V/YVzLgc4HbjJzI5vwX3tE+fcTryulb/n26/f13gJGAB+cpIGBP62z+NViwfgdcMMjO1cBxTs8p7o6pwLrurtrcyg5/3xqqzF/rWe3uVanZ1z9wbf4u5O6sf+N+A6IM051wNYSsveRxuAFP91CY6tpSrwvigIOGB3O/r/duYBZ+N1L93dlxoiImFHCaKISJgys5OB7/PNhDPXA2ea2bEtPMVdwOVAcNXxUeAe/4M2ZpZhZsEzfH6A9+F7jv/7+/7vHwZVjJqLOdafCOQveOMZ7/I3dcVL3krwPmT/vxbeA865arxxmM8BC5xza3ezXxle5XSqmZ1pZslmFm9mJ5nZfUFxbAfKzewg4KdBsY8xs1wzi8dLBqqBBn/c5d+AP5lZT3/fvoExemZ2qpkN8ruiluFVZPdmrOa+eBpvvOWkoLbngcvNbISZJeC9xp/4XWlxzn2Ol6T9HXjLObfNP24BsMPMbjGzJP9veIiZjdmP+C42s6Fmlow3RnGm//4JVNZO9K+TaN66l/1aeN7OeAnkFgDzZvht0Uy5zrk1eN1Z7zKzTuYtfbJrFbY5i4Cz/ffVIODKPez/FPBLYDjelzUiIhFBCaKISBgyb5mKR4EbnHOlAM65zXgTojxm/gyazXHOFeAlEsEVkz8Dr+F1h9wBzMerJgV8gJdEBRLED/ESujk0b7yZleMlX+8D3YAxzrkl/van8LrzrQe+9K+7N57E+6DdbCXGOfdHvIT6V3hJxDq8BPef/i7/g1fN3IGX9M0IOryb37bVj7UEr/soeOM5VwLz/a6p7wBD/G2D/d/L8apGD/uTC7UZP9n6Dd8e4/kO3ni/l/GqZQP59jhC8JLs7xE0Hs4/16l4XYsL+CaJbHZ86B48DUzH6+6ZCNzgX2sdXiX5dr75+9xMCz+POOe+BP6I9zpvwntPfLQXcV2E934vBX5LyyaOCVQ0/wTs9K/7JHueZOkV/C7dQV1dRUTCnrV8HL2IiEho+BOMrAAOcM5tD3U8Ev3M7FBgjt+NdV/PsQr4iZ+8i4hEBFUQRUQkrPmzqt4EvKDkUNqD/577AV6X1H09xzl41cd3WysuEZH2sNuZ3kRERELNn1BkE16Xz0l72F2ktazF6x57+b4cbGbv4010dMlerh0qIhJy6mIqIiIiIiIigLqYioiIiIiIiK/DdTFNT093WVlZoQ5DREREREQkJBYuXFjsnMtoaluHSxCzsrLIy9vnMeciIiIiIiIRzczW7G6bupiKiIiIiIgIoARRREREREREfEoQRUREREREBOiAYxBFRERERCJBbW0tRUVFVFdXhzoUiVCJiYn069eP+Pj4Fh+jBFFEREREJAwVFRXRtWtXsrKyMLNQhyMRxjlHSUkJRUVFZGdnt/g4dTEVEREREQlD1dXVpKWlKTmUfWJmpKWl7XUFWgmiiIiIiEiYUnIo+2Nf3j9KEEVERERERARQgigiIiIiIiI+JYgiIiIiIhK2CgsLOeSQQ0IdRoehBFFERERERKJWXV1dqEOIKFrmQkREREQkzN31r2V8+fX2Vj3n0D7d+O1pw5rdp7CwkJNOOomjjjqKjz/+mL59+/Lqq6/y1VdfcfXVV1NZWcnAgQOZNm0amzZt4tJLL2XBggWNx5522mksWbKEhQsXctNNN1FeXk56ejrTp0+nd+/eTJw4kZEjRzJ37lwqKip46qmn+MMf/sCSJUs4//zzufvuuwEvyfvhD3/IZ599xrBhw3jqqadITk5u9rwjRozgww8/5MILL+QXv/jFd+7tsssuo1u3buTl5bFx40buu+8+zj33XADuv/9+XnzxRWpqajjrrLO46667uP/++0lISOCGG27g5z//OYsXL+bdd9/l3Xff5fHHH+fZZ59t8jV88803uf3226mvryc9PZ3Zs2ezYMECbrzxRqqrq0lKSuKJJ55gyJAhLFu2jMsvv5ydO3fS0NDAyy+/zODBg3nmmWeYMmUKO3fuJDc3l4cffhiAK6+8kry8PMyMK664gp///Of7/H4IUAVRRERERER2Kz8/n2uvvZZly5bRo0cPXn75ZS699FL+93//ly+++ILhw4dz1113cdBBB7Fz504KCgoAmDFjBueffz61tbVcf/31zJw5k4ULF3LFFVdwxx13NJ6/U6dO5OXlcfXVV3PGGWcwdepUli5dyvTp0ykpKQHgq6++4pprrmH58uV069aNhx9+eI/n3blzJ3l5eU0mhwEbNmzgww8/5PXXX+fWW28FYNasWeTn57NgwQIWLVrEwoULmTNnDhMmTGDu3LkA5OXlUV5eTm1tLXPnzuXoo49u8vxbtmzhqquu4uWXX2bx4sW89NJLABx00EHMnTuXzz//nN/97nfcfvvtADz66KPceOONLFq0iLy8PPr168fy5cuZMWMGH330EYsWLSI2NpZnn32WRYsWsX79epYuXcqSJUu4/PLL9/VP/C2qIIqIiIiIhLk9VfraUnZ2NiNGjABg1KhRrFq1im3btnHMMccAMHnyZM477zwAfvCDHzBjxgxuvfVWZsyYwYwZM/jqq69YunQp3//+9wGor6+nd+/ejec//fTTARg+fDjDhg1r3JaTk8O6devo0aMHmZmZHHnkkQBcfPHFTJkyhUmTJjV73vPPP3+P93bmmWcSExPD0KFD2bRpE+AliLNmzWLkyJEAlJeXk5+fz6WXXsrChQvZvn07CQkJHH744eTl5TF37lymTJnS5Pnnz5/P0Ucf3bhQfWpqKgBlZWVMnjyZ/Px8zIza2loAxo8fzz333ENRURFnn302gwcPZvbs2SxcuJAxY8YAUFVVRc+ePTnttNNYvXo1119/PaeccgonnHDCHu+3JZQgioiIiEhUc85RVlVLj+ROoQ4lIiUkJDQ+j42NZdu2bbvd9/zzz+e8887j7LPPxswYPHgwS5YsYdiwYcybN6/Z88fExHzrWjExMY3jB3ddz8/McM41e97OnTvv1b055xp/3nbbbfzkJz/5zv7Z2dlMnz6dI444gkMPPZT33nuPlStXcvDBB+/xWsF+/etfc+yxx/LKK69QWFjIxIkTAbjooovIzc3l3//+NyeffDJ//etfcc4xefJk/vCHP3znPIsXL+att97i0Ucf5cUXX2TatGl7FUdT1MVURERERKLa619sYNwfZrN5e3WoQ4kK3bt3JyUlpbG75dNPP91YTRw4cCCxsbH8/ve/b6zgDRkyhC1btjQmcrW1tSxb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\n",
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-HHqK0U_aCVg"
      },
      "source": [
        "##**7.Conclusion**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "chasSKxMZYV8"
      },
      "source": [
        "We can observe the increasedslope of reported new cases in the winter months for both states.\r\n",
        "\r\n",
        "The summer months boast a flatter line where each new day produced similar reported numbers.\r\n",
        "\r\n",
        "One thing that could have had an effect is the increased testing around the thanksgiving holiday.\r\n",
        "Concerned travelers tested more and this led to the sharp spikes observed in November."
      ]
    }
  ]
}
